{#-SDF generator for tether with Tether model-#}
{#-Maintained by Antonio Antunes <antonioantunes5@tecnico.ulisboa.pt>-#}
{#-The parameters bellow are the ones to be adjusted-#}
{%- set number_elements = 30 -%}
{%- set mu = 0.05 %}   {#- mu: cable linear density * gravity acceleration -#}
{%- set tl = 1.0 -%}	  			{#- tl: length of the tether element (meters) -#}
{%- set cr = 0.001 -%}	  			{#- cr: radius of the tether element (meters) -#}
{%- set cr_v = 0.006 -%}	  		{#- cr_v: radius of the tether element visual (meters) -#}
{%- set sr = 0.009 -%}	  			{#- sr: element joint radius (sphere) (meters) -#}
{%- set m = 0.000001 * tl -%}			{#- m: mass of the element (kg), given the length -#}
{%- set cda = 1.2535816618911175 -%}		{#- cda: the ratio of the drag coefficient before stall. -#}
{%- set cda_stall = 1.4326647564469914 -%}	{#- cda_stall: the ratio of the drag coefficient after stall. -#}
{%- set damping = 0.0 -%}			{#- Model damping -#}
{%- set friction = 0.0 -%}			{#- Friction of the model relative to the world -#}
{%- set spring_stiffness = 0.0 -%}		{#- Spring stiffness -#}
{%- set spring_reference = 0.0 -%}		{#- Reference where the spring forces are applied -#}
{%- set element_color = 'Yellow' -%}		{#- Color of the tether elements -#}
{%- set joint_color = 'Red' -%}		{#- Color of the tether element joints -#}
{%- set anchor_point_x = 0.0 -%}		{#- X coordinate of the anchor point. This is the model global origin -#}
{%- set anchor_point_y = 0.0 -%}		{#- Y coordinate of the anchor point. This is the model global origin -#}
{%- set vehicle_attach_x = 0.05 -%}		{#- X coordinate of the attach point. Subtracted to the vehicle spawn position to give the attach point -#}
{%- set vehicle_attach_y = 0.05 -%}		{#- Y coordinate of the attach point. Subtracted to the vehicle spawn position to give the attach point -#}
{%- set vehicle_attach_z = 0.16 -%}		{#- Z coordinate of the attach point. Subtracted to the vehicle spawn position to give the attach point -#}
{%- set vehicle_to_attach_dist = 0.25 -%}	{#- Relative distance in X from the vehicle to the attachment points. This approach is used instead the vehicle spawn X point to avoid mistakes. WARNING: has to be greater or equal than tl! -#}
{#-----------------------------------------------------------------------------------------------------------#}
{#---------------------------------------------:Computed parameters:-----------------------------------------#}
{%- set last_elem = number_elements |int - 1 -%}
{%- set full_tether_len = number_elements * tl / 2 + (number_elements - 1) * tl / 2 -%}
{%- set vehicle_spawn_point_x = anchor_point_x + full_tether_len + vehicle_to_attach_dist + vehicle_attach_x -%}
{%- set vehicle_spawn_point_y = anchor_point_y -%}
{%- set y_el = np.sqrt(np.power(vehicle_spawn_point_x - full_tether_len - tl / 2 - anchor_point_x - vehicle_attach_x, 2) + np.power(vehicle_spawn_point_y - anchor_point_y - vehicle_attach_y, 2) + np.power(vehicle_attach_z, 2)) -%}
{#-----------------------------------------------------------------------------------------------------------#}

{%- macro cylinder(tl, cr_v) -%}
      <geometry>
          <cylinder>
            <length>{{tl}}</length>
            <radius>{{cr_v}}</radius>
          </cylinder>
        </geometry>
{%- endmacro -%}

{%- macro sphere(sr) -%}
      <geometry>
          <sphere>
            <radius>{{sr}}</radius>
          </sphere>
        </geometry>
{%- endmacro -%}

{%- macro inertial(m) -%}
{#- A note about the inertial tensor matrix - It should be as bellow -#}
{#- {%- set izz = m/2*cr**2 -%} -#}
{#- {%- set ixx = m/12*tl**2 + m/4*cr**2 -%} -#}
{#- {%- set iyy = m/12*tl**2 + m/4*cr**2 -%} -#}
{#- but seems to segfault Gazebo when changing the values of the element specs -#}
{%- set izz = 0.001 -%}
{%- set ixx = 0.001 -%}
{%- set iyy = 0.001 -%}
      <inertial>
        <mass>{{m}}</mass>
        <inertia>
          <ixx>{{ixx}}</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>{{iyy}}</iyy>
          <iyz>0</iyz>
          <izz>{{izz}}</izz>
        </inertia>
      </inertial>
{%- endmacro -%}

{%- macro collision(tl, cr) -%}
<collision name="collision">
        <pose>{{tl / 2}} 0 0 0 1.570790 0</pose>
        {{ cylinder(tl, cr) }}
        <surface>
          <contact>
            <ode>
	      <min_depth>0.00005</min_depth>
            </ode>
          </contact>
          <friction>
            <ode>
	      <mu>1.0</mu>
	      <mu2>1.0</mu2>
            </ode>
          </friction>
        </surface>
      </collision>
{%- endmacro -%}

{%- macro element_material(element_color) -%}
      <material>
        <script>
          <name>Gazebo/{{element_color}}</name>
          <uri>file://media/materials/scripts/gazebo.material</uri>
        </script>
      </material>
{%- endmacro -%}

{%- macro joint_material(joint_color) -%}
      <material>
        <script>
          <name>Gazebo/{{joint_color}}</name>
          <uri>file://media/materials/scripts/gazebo.material</uri>
        </script>
      </material>
{%- endmacro -%}

{%- macro element_visual(tl, cr_v, element_color) -%}
{%- set x = tl * 0.5 -%}
      <visual name="element_visual">
        <pose>{{x}} 0 0 0 1.570790 0</pose>
        {{ cylinder(tl, cr_v) }}
        {{ element_material(element_color) }}
      </visual>
{%- endmacro -%}

{%- macro sphere_visual(sr, sphere_tlor) -%}
      <visual name="sphere_visual">
        {{ sphere(sr) }}
        {{ joint_material(joint_color) }}
      </visual>
{%- endmacro -%}

{%- macro link(n, x, y, z, theta, m, tl, cr, cr_v, sr, element_color, joint_color) -%}
    <link name="link_{{n}}">
      <pose>{{x}} {{y}} {{z}} 0.0 0.0 {{theta}}</pose>
      {{ inertial(m) }}
      {%- if n != 0 and n != "y_left_fixed" and n != "y_right_fixed" -%}
      {{ element_visual(tl, cr_v, element_color) }}
      {%- endif -%}
      {%- if n != 0 -%}
      {{ sphere_visual(sr, joint_color) }}
      {%- endif -%}
      <self_collide>0</self_collide>
      <kinematic>1</kinematic>
      <gravity>0</gravity>
      <velocity_decay>0</velocity_decay>
      <must_be_base_link>1</must_be_base_link>
    </link>
{%- endmacro %}

{%- macro joint(k) -%}
    <joint name="joint_{{k}}" type="fixed">
      <child>link_{{k}}</child>
      <parent>world</parent>
    </joint>
{%- endmacro -%}

{%- macro y_element(y_el, tl) %}
    {#- Lose elements: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -#}
    {{ link("y_right", lose_x, anchor_point_y, 0.0, 0.0, m, y_el, cr, cr_v, sr, element_color, joint_color) }}
    {#- Fixed elements: ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -#}
    {{ link("y_right_fixed", fixed_x, anchor_point_y, 0.0, 0.0, m, y_el, cr, cr_v, sr, element_color, joint_color) }}
{%- endmacro -%}

<?xml version="1.0" ?>
<!-- DO NOT EDIT: Generated from tether.sdf.jinja -->
<sdf version="1.5">
  <model name="tether">
    <pose>{{anchor_point_x - tl}} {{anchor_point_y}} 0.0 0.0 0.0 0.0</pose>
    {% for n in range(number_elements) -%}
    {%- set x = anchor_point_x + (tl / 2 + (n * tl / 2 + (n - 1) * tl / 2)) -%}
    {{ link(n, x, anchor_point_y, 0.0, 0.0, m, tl, cr, cr_v, sr, element_color, joint_color) }}
    {{ joint(n) }}
    {% endfor -%}
    {{ y_element(y_el, tl) }}
    {% for k in range(1, number_elements) -%}
    {% endfor -%}

    <link name='base_link'>
      <pose>0 0 0 0 0 0</pose>
      <inertial>
        <mass>1.0</mass>
        <inertia>
          <ixx>1.0</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>1.0</iyy>
          <iyz>0</iyz>
          <izz>1.0</izz>
        </inertia>
      </inertial>
      <self_collide>0</self_collide>
      <kinematic>0</kinematic>
      <gravity>0</gravity>
      <velocity_decay>0</velocity_decay>
      <must_be_base_link>1</must_be_base_link>
    </link>

    <!-- Link for the first segment -->
    <link name='solo_right'>
      <pose>{{vehicle_spawn_point_x}} {{vehicle_spawn_point_y}} 0.05 0 0 0</pose>
      <inertial>
        <mass>1.0</mass>
        <inertia>
          <ixx>1.0</ixx>
          <ixy>0</ixy>
          <ixz>0</ixz>
          <iyy>1.0</iyy>
          <iyz>0</iyz>
          <izz>1.0</izz>
        </inertia>
      </inertial>
      <self_collide>0</self_collide>
      <kinematic>0</kinematic>
      <gravity>0</gravity>
      <velocity_decay>0</velocity_decay>
      <must_be_base_link>1</must_be_base_link>
    </link>

    <!-- Plugin for updating the points position of the tether -->
    <plugin name='tether_model' filename='libtether_plugin.so'>
      <Lmax>50</Lmax>
      <mu>{{mu}}</mu>
      <nLinks>{{number_elements}}</nLinks>
      <vehicle_1>{{ vehicle_1 }}</vehicle_1>
      <vehicle_2>{{ vehicle_2 }}</vehicle_2>
    </plugin>

  </model>
</sdf>
